plugins {
    id("com.github.johnrengelman.shadow") version "7.1.1"
    id("io.micronaut.application") version "3.2.0"
    id("com.google.cloud.tools.jib") version "2.8.0"
    id('jacoco')
    id 'org.cyclonedx.bom' version "1.3.0"
}

version = System.getenv('VERSION')?: '0.2'
group = "io.delfidx"
def imageName = System.getenv("ECR_REPO") ?: 'sample-service'
def imageTag = System.getenv("IMAGE_TAG") ?: version

repositories {
    mavenCentral()
}

dependencies {
    //WARNING!! order is important for lombok. it must come before micronaut's own processors otherwise micronaut cant process them
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.beanvalidation:micronaut-hibernate-validator")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.liquibase:micronaut-liquibase")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.reactor:micronaut-reactor")

    implementation('org.apache.commons:commons-collections4:4.4')

    runtimeOnly("ch.qos.logback:logback-classic")

    runtimeOnly("org.postgresql:postgresql")
    testImplementation("org.testcontainers:postgresql")


    testImplementation("org.assertj:assertj-core")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    implementation("io.micronaut:micronaut-validation")

    testImplementation("org.mockito:mockito-core")

}


application {
    mainClass.set("io.delfidx.Application")
}
java {
    sourceCompatibility = JavaVersion.toVersion("17")
    targetCompatibility = JavaVersion.toVersion("17")
}
// ---- custom test, and build info tasks/overrides
compileJava {
    doLast {
        print("generating build info properties")
        def resourcesDir = sourceSets.main.output.classesDirs.files.find { it.name == 'main' }
        def metaInfDir = "$resourcesDir/META-INF" as String
        mkdir(metaInfDir)
        def buildInfoFile = new File(metaInfDir, 'build-info.properties')
        Properties properties = new Properties()
        properties.setProperty('build.name', project.name)
        properties.setProperty('build.version', project.version.toString())
        properties.setProperty('image.name', imageName)
        properties.setProperty('image.tag', imageTag)
        // Write the properties back to the file
        buildInfoFile.withOutputStream {
            properties.store(it, null)
        }
    }
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/io/delfidx/Application.class',
                    '**/io/delfidx/common/Roles.class',
                    '**/io/delfidx/**/models/*.class'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.79
            }
            excludes = [
                    'io.delfidx.Application',
                    'io.delfidx.common.Roles',
                    'io.delfidx.common.pagination.PaginationFactory',
                    'io.delfidx.kit.models.*',
                    'io.delfidx.sample.models.*',
                    'io.delfidx.study.models.*',
                    'io.delfidx.subject.models.*'
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
tasks {
    jib {
        from {
            image= "openjdk:17-alpine"
        }
        to {
            image = imageName
            tags = [imageTag]
        }
        container {
            creationTime = 'USE_CURRENT_TIMESTAMP' //otherwise it defaults to 1970
        }
    }
}

//---- end custom tasks

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.delfidx.*")
    }
}